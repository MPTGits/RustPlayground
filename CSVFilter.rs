use std::io::{self, Read, BufRead, BufReader, Write};

use std::collections::HashMap;

macro_rules! assert_match { 
    ($expr:expr, $pat:pat) => {
        if let $pat = $expr {
            // all good
        } else {
            assert!(false, "Expression {:?} does not match the pattern {:?}", $expr, stringify!($pat));
        }
    }
}

// –ó–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ IO –≥—Ä–µ—à–∫–∏:
struct ErroringReader {}

impl Read for ErroringReader {
    fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> {
        Err(io::Error::new(io::ErrorKind::Other, "read error!"))
    }
}

impl BufRead for ErroringReader {
    fn fill_buf(&mut self) -> io::Result<&[u8]> {
        Err(io::Error::new(io::ErrorKind::Other, "fill_buf error!"))
    }

    fn consume(&mut self, _amt: usize) { }
}



 #[test]
fn test_string_parsing() {
    assert_eq!(skip_next("[test]", '['), Some("test]"));
    assert_eq!(take_until("one/two", '/'), ("one", "/two"));
    assert_eq!(take_and_skip("one/two", '/'), Some(("one", "two")));
}


 #[test]
fn test_skip_first_char() {
    assert_eq!(skip_next("[test]", ']'), None);
    assert_eq!(skip_next("", ']'), None);
    assert_eq!(skip_next("ü•∫testü•∫", 'ü•∫'), Some("testü•∫"));
}

 #[test]
fn test_take_until_match() {
    assert_eq!(take_until("pooltest", 'l'), ("poo", "ltest"));
    assert_eq!(take_until("pooltest", 'f'), ("pooltest", ""));
    assert_eq!(take_until("", 'k'),("",""));
    assert_eq!(take_until("ü•∫testü•∫okok", 'ü•∫'),("","ü•∫testü•∫okok"));
    assert_eq!(take_until("testü•∫okok", 'ü•∫'),("test","ü•∫okok"));
    assert_eq!(take_until("testü•∫", 'ü•∫'),("test","ü•∫"));
}

#[test]
fn test_take_until_match_excluding_value() {
    assert_eq!(take_and_skip("one/two", 'l'), None);
    assert_eq!(take_and_skip("k", 'k'),Some(("","")));
    assert_eq!(take_and_skip("", 'k'), None);
    assert_eq!(take_and_skip("ü•∫testü•∫okok", 'ü•∫'),Some(("","testü•∫okok")));
    assert_eq!(take_and_skip("testü•∫okok", 'ü•∫'),Some(("test","okok")));
}

#[test]
fn test_csv_error() {
    //Error when reading
    assert_match!(Csv::new(ErroringReader {}).err(), Some(CsvError::IO(_)));
}

#[test]
fn test_csv_parse_line() {
    let reader = BufReader::new(r#"
    name, age, birth date
    "Douglas Adams", "42", "1952-03-11"
"#.trim().as_bytes());

let mut csv = Csv::new(reader).unwrap();
//No bracket at start
assert_match!(csv.parse_line(r#" Douglas Adams", "42", "1952-03-11"#).err(),
                             Some(CsvError::InvalidRow(_)));
//Fewer columns
assert_match!(csv.parse_line(r#" Douglas Adams", "1952-03-11"#).err(),
                             Some(CsvError::InvalidRow(_)));
//More columns
assert_match!(csv.parse_line(r#" Douglas Adams", "32", "valid" ,"1952-03-11"#).err(),
                             Some(CsvError::InvalidRow(_)));
//Valid scenario
let row = csv.parse_line(r#""Basic Name","13","2020-01-01""#).unwrap();
    assert_eq! {
        (row["name"].as_str(), row["age"].as_str(), row["birth date"].as_str()),
        ("Basic Name", "13", "2020-01-01"),
    };
}

#[test]
fn test_write_to_valid_scenario() {
    let data = r#"
        name, age, birth date
        "Gen Z. Person", "20"  ,  "2000-01-01"
    "#.trim().as_bytes();

    let mut csv = Csv::new(BufReader::new(data)).unwrap();
    let mut output = Vec::new();
    csv.write_to(&mut output).unwrap();

    let output_lines = output.lines().
        map(Result::unwrap).
        collect::<Vec<String>>();

    assert_eq!(output_lines, &[
        "name, age, birth date",
        "\"Gen Z. Person\", \"20\", \"2000-01-01\"",
    ]);
}

#[test]
fn test_iterator_with_no_filter() {
let reader = BufReader::new(r#"
    name, age, birth date
    "Douglas Adams", "42", "1952-03-11"
    "Gen Z. Person", "20", "2000-01-01"
    "Ada Lovelace", "36", "1815-12-10"
"#.trim().as_bytes());

let mut csv = Csv::new(reader).unwrap();
let filtered_names = csv.map(|row| row.unwrap()["name"].clone()).collect::<Vec<_>>();
//When no filter function
assert_eq!(filtered_names, &["Douglas Adams","Gen Z. Person", "Ada Lovelace"]);
}

#[test]
fn test_iterator_with_filter(){
    let reader = BufReader::new(r#"
    name, age, birth date
    "Douglas Adams", "42", "1952-03-11"
    "Gen Z. Person", "20", "2000-01-01"
    "Ada Lovelace", "36", "1815-12-10"
"#.trim().as_bytes());

let mut csv = Csv::new(reader).unwrap();
csv.apply_selection(|row| {
    let age = row.get("age").ok_or_else(|| CsvError::InvalidColumn(String::from("age")))?;
    let age = age.parse::<u32>().map_err(|_| CsvError::ParseError(String::from(age)));
    Ok(age.unwrap() > 40)
});
let filtered_names = csv.map(|row| row.unwrap()["name"].clone()).collect::<Vec<_>>();
assert_eq!(filtered_names, &["Douglas Adams"]);
}

#[test]
fn test_iterator_with_filter_fales_values_only(){
    let reader = BufReader::new(r#"
    name, age, birth date
    "Douglas Adams", "42", "1952-03-11"
    "Gen Z. Person", "20", "2000-01-01"
    "Ada Lovelace", "36", "1815-12-10"
"#.trim().as_bytes());

let mut csv = Csv::new(reader).unwrap();
csv.apply_selection(|row| {
    let age = row.get("age").ok_or_else(|| CsvError::InvalidColumn(String::from("age")))?;
    let age = age.parse::<u32>().map_err(|_| CsvError::ParseError(String::from(age)));
    Ok(age.unwrap() > 50)
});
let filtered_names = csv.map(|row| row.unwrap()["name"].clone()).collect::<Vec<_>>();
let expected:Vec<String> = Vec::new();
assert_eq!(filtered_names, expected);
}

#[test]
fn test_iterator_with_filter_error(){
    let reader = BufReader::new(r#"
    name, age, birth date
    "Douglas Adams", "42", "1952-03-11"
    "Gen Z. Person", "20", "2000-01-01"
    "Ada Lovelace", "36", "1815-12-10"
"#.trim().as_bytes());

let mut csv = Csv::new(reader).unwrap();
csv.apply_selection(|row| {
    Err(CsvError::InvalidColumn("Some".to_string()))
});
assert_match!(csv.next().unwrap().err(), Some(CsvError::InvalidColumn(_)));
}

#[derive(Debug)]
pub enum CsvError {
    IO(std::io::Error),
    ParseError(String),
    InvalidHeader(String),
    InvalidRow(String),
    InvalidColumn(String),
}

/// –ü—Ä–æ–≤–µ—Ä—è–≤–∞ —á–µ —Å–ª–µ–¥–≤–∞—â–∏—è —Å–∏–º–≤–æ–ª –≤—ä–≤ –≤—Ö–æ–¥–Ω–∏—è –Ω–∏–∑ `input` –µ —Ç–æ—á–Ω–æ `target`.
///
/// –ê–∫–æ –Ω–∏–∑–∞ –Ω–∞–∏—Å—Ç–∏–Ω–∞ –∑–∞–ø–æ—á–≤–∞ —Å —Ç–æ–∑–∏ —Å–∏–º–≤–æ–ª, –≤—Ä—ä—â–∞ –æ—Å—Ç–∞—Ç—ä–∫–∞ –æ—Ç –Ω–∏–∑–∞ –±–µ–∑ –Ω–µ–≥–æ, –ø–∞–∫–µ—Ç–∏—Ä–∞–Ω –≤—ä–≤
/// `Some`. –ò–Ω–∞—á–µ, –≤—Ä—ä—â–∞ `None`. –ü—Ä–∏–º–µ—Ä–Ω–æ:
///
/// skip_next("(foo", '(') //=> Some("foo")
/// skip_next("(foo", ')') //=> None
/// skip_next("", ')')     //=> None
///
pub fn skip_next(input: &str, target: char) -> Option<&str> {
    let vec_chars = input.chars().collect::<Vec<char>>();
    if !vec_chars.is_empty() && vec_chars[0] == target {
        let (_, result) = input.split_at(vec_chars[0].len_utf8());
        return Some(result)
    }
    None
}
/// –¢—ä—Ä—Å–∏ —Å–ª–µ–¥–≤–∞—â–æ—Ç–æ —Å—Ä–µ—â–∞–Ω–µ –Ω–∞ —Å–∏–º–≤–æ–ª–∞ `target` –≤ –Ω–∏–∑–∞ `input`. –í—Ä—ä—â–∞ –Ω–∏–∑–∞ –¥–æ —Ç–æ–∑–∏ —Å–∏–º–≤–æ–ª –∏ –Ω–∏–∑–∞
/// –æ—Ç —Ç–æ–∑–∏ —Å–∏–º–≤–æ–ª –Ω–∞—Ç–∞—Ç—ä–∫, –≤ –¥–≤–æ–π–∫–∞.
///
/// –ê–∫–æ –Ω–µ –Ω–∞–º–µ—Ä–∏ `target`, –≤—Ä—ä—â–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è –Ω–∏–∑ –∏ –ø—Ä–∞–∑–µ–Ω –Ω–∏–∑ –∫–∞—Ç–æ –≤—Ç–æ—Ä–∏ –µ–ª–µ–º–µ–Ω—Ç –≤ –¥–≤–æ–π–∫–∞—Ç–∞.
///
/// take_until(" foo/bar ", '/') //=> (" foo", "/bar ")
/// take_until("foobar", '/')    //=> ("foobar", "")
///
pub fn take_until(input: &str, target: char) -> (&str, &str) {
        let vec_chars = input.chars().collect::<Vec<char>>();
        let mut curr_size = 0;
        for item in vec_chars {
            if skip_next(&item.to_string(), target) != None {
                return input.split_at(curr_size);
            }
            curr_size += item.len_utf8()    
        }
        (input,"")
}


/// –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –æ—Ç –≥–æ—Ä–Ω–∏—Ç–µ –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ -- –≤–∑–µ–º–∞ —Å–∏–º–≤–æ–ª–∏—Ç–µ –¥–æ `target` —Å–∏–º–≤–æ–ª–∞, –∏ –≤—Ä—ä—â–∞ —á–∞—Å—Ç—Ç–∞ –ø—Ä–µ–¥–∏
/// —Å–∏–º–≤–æ–ª–∞ –∏ —á–∞—Å—Ç—Ç–∞ —Å–ª–µ–¥, –±–µ–∑ —Å–∞–º–∏—è —Å–∏–º–≤–æ–ª. –ê–∫–æ —Å–∏–º–≤–æ–ª–∞ –≥–æ –Ω—è–º–∞, –≤—Ä—ä—â–∞ `None`.
///
/// take_and_skip(" foo/bar ", '/') //=> Some((" foo", "bar "))
/// take_and_skip("foobar", '/')    //=> None
///
pub fn take_and_skip(input: &str, target: char) -> Option<(&str, &str)> {
    let (first_half, second_half) = take_until(input, target);
    if second_half == ""{
        return None;
    }
    let first_char = second_half.chars().collect::<Vec<char>>()[0];
    Some((first_half, skip_next(second_half,first_char).unwrap()))
}           

type Row = HashMap<String, String>;

pub struct Csv<R: BufRead> {
    pub columns: Vec<String>,
    reader: R,
    selection: Option<Box<dyn Fn(&Row) -> Result<bool, CsvError>>>,
}

impl<R: BufRead> Csv<R> {
    /// –ö–æ–Ω—Å—Ç—Ä—É–∏—Ä–∞ –Ω–æ–≤–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –æ—Ç –ø–æ–¥–∞–¥–µ–Ω–∏—è –≤—Ö–æ–¥. –¢—Ä–µ—Ç–∏—Ä–∞ —Å–µ –∫–∞—Ç–æ "–Ω–µ—â–æ, –æ—Ç –∫–æ–µ—Ç–æ –º–æ–∂–µ –¥–∞ —Å–µ —á–µ—Ç–µ
    /// —Ä–µ–¥ –ø–æ —Ä–µ–¥".
    ///
    /// –û—á–∞–∫–≤–∞–º–µ –¥–∞ –ø—Ä–æ—á–µ—Ç–µ—Ç–µ –ø—ä—Ä–≤–∏—è —Ä–µ–¥ –æ—Ç –≤—Ö–æ–¥–∞ –∏ –¥–∞ –≥–æ –æ–±—Ä–∞–±–æ—Ç–∏—Ç–µ –∫–∞—Ç–æ –∑–∞–≥–ª–∞–≤–Ω–∞ —á–∞—Å—Ç ("header").
    /// –¢–æ–≤–∞ –æ–∑–Ω–∞—á–∞–≤–∞, —á–µ –ø—ä—Ä–≤–∏—è —Ä–µ–¥ –±–∏ —Ç—Ä—è–±–≤–∞–ª–æ –¥–∞ –≤–∫–ª—é—á–≤–∞ –∏–º–µ–Ω–∞ –Ω–∞ –∫–æ–ª–æ–Ω–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏ —Å—ä—Å
    /// –∑–∞–ø–µ—Ç–∞–π–∫–∏ –∏ –º–æ–∂–µ –±–∏ –ø—Ä–∞–∑–Ω–∏ –º–µ—Å—Ç–∞. –ü—Ä–∏–º–µ—Ä–Ω–æ:
    ///
    /// - name, age
    /// - name,age,birth date
    ///
    /// –í —Å–ª—É—á–∞–π, —á–µ –∏–º–∞ –≥—Ä–µ—à–∫–∞ –æ—Ç –≤–∏–∫–∞–Ω–µ –Ω–∞ –º–µ—Ç–æ–¥–∏ –Ω–∞ `reader`, —Ç—è –±–∏ —Ç—Ä—è–±–≤–∞–ª–æ –¥–∞ –µ `io::Error`.
    /// –≤—ä—Ä–Ω–µ—Ç–µ `CsvError::IO`, –∫–æ–µ—Ç–æ –æ–ø–∞–∫–æ–≤–∞ –≤—ä–ø—Ä–æ—Å–Ω–∞—Ç–∞ –≥—Ä–µ—à–∫–∞.
    ///
    /// –ê–∫–æ –ø—ä—Ä–≤–∏—è —Ä–µ–¥ –µ –ø—Ä–∞–∑–µ–Ω, –ø—Ä–æ—á–∏—Ç–∞–Ω–µ—Ç–æ —â–µ –≤–∏ –≤—ä—Ä–Ω–µ 0 –±–∞–π—Ç–∞. –ü—Ä–∏–º–µ—Ä–Ω–æ, `read_line` –≤—Ä—ä—â–∞
    /// `Ok(0)` –≤ —Ç–∞–∫—ä–≤ —Å–ª—É—á–∞–π. –¢–æ–≤–∞ –æ–∑–Ω–∞—á–∞–≤–∞, —á–µ –Ω—è–º–∞–º–µ –≤–∞–ª–∏–¥–µ–Ω header -- –Ω–∏—Ç–æ –µ–¥–Ω–∞ –∫–æ–ª–æ–Ω–∞ –Ω—è–º–∞,
    /// –æ—á–∞–∫–≤–∞–º–µ –≥—Ä–µ—à–∫–∞ `CsvError::InvalidHeader`.
    ///
    /// –ê–∫–æ –∏–º–∞ –¥—É–±–ª–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–ª–æ–Ω–∏ -- –¥–≤–µ –∫–æ–ª–æ–Ω–∏ —Å –µ–¥–Ω–æ –∏ —Å—ä—â–æ –∏–º–µ -- —Å—ä—â–æ –≤—ä—Ä–Ω–µ—Ç–µ
    /// `CsvError::InvalidHeader`.
    ///
    /// –ê–∫–æ –≤—Å–∏—á–∫–æ –µ –Ω–∞—Ä–µ–¥, –≤—ä—Ä–Ω–µ—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–∞–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç, –Ω–∞ –∫–æ—è—Ç–æ `columns` –µ —Å–ø–∏—Å—ä–∫ —Å –∫–æ–ª–æ–Ω–∏—Ç–µ,
    /// –≤ —Å—ä—â–∏—è —Ä–µ–¥, –≤ –∫–æ–π—Ç–æ —Å–∞ –ø–æ–¥–∞–¥–µ–Ω–∏, –±–µ–∑ –∑–∞–æ–±–∏–∫–∞–ª—è—â–∏—Ç–µ –≥–∏ –ø—Ä–∞–∑–Ω–∏ —Å–∏–º–≤–æ–ª–∏ (–∏–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ
    /// `.trim()`).
    ///
    pub fn new(mut reader: R) -> Result<Self, CsvError> {
        let mut header = String::new();
        let bytes_read = reader.read_line(&mut header);
        match  bytes_read{
            Err(_) => return Err(CsvError::IO(io::Error::new(io::ErrorKind::Other, "reading from buffer error!"))),
            Ok(s) => if bytes_read.unwrap() == 0 { return Err(CsvError::InvalidHeader("Header row is missing!".to_string()))},
        };
        header = header.trim().to_string();
        let header_vec = header.split(",").map(|x| x.trim().to_string()).collect::<Vec<String>>();
        Ok(Self{columns: header_vec, reader: reader, selection: None})
    }

    /// –§—É–Ω–∫—Ü–∏—è—Ç–∞ –ø—Ä–∏–µ–º–∞ —Å–ª–µ–¥–≤–∞—â–∏—è —Ä–µ–¥ –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–∞ `Row` —Å—Ç–æ–π–Ω–æ—Å—Ç
    /// (`HashMap<String, String>`) —Å—ä—Å –∫–æ–ª–æ–Ω–∏—Ç–µ –∏ —Å—ä–æ—Ç–≤–µ—Ç—Å–≤–∞—â–∏—Ç–µ –∏–º —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –Ω–∞ —Ç–æ–∑–∏ —Ä–µ–¥.
    ///
    /// –ê–ª–≥–æ—Ä–∏—Ç—ä–º–∞ –µ –≥–æ—Ä–µ-–¥–æ–ª—É:
    ///
    /// 1. –ò–∑—á–∏—Å—Ç–µ—Ç–µ —Ä–µ–¥–∞ —Å `.trim()`.
    /// 2. –û—á–∞–∫–≤–∞—Ç–µ, —á–µ —Ä–µ–¥–∞ —â–µ –∑–∞–ø–æ—á–Ω–µ —Å—ä—Å `"`, –∏–Ω–∞—á–µ –≤—Ä—ä—â–∞—Ç–µ –≥—Ä–µ—à–∫–∞.
    /// 3. –ü—Ä–æ—á–∏—Ç–∞—Ç–µ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ –æ—Ç –æ—Ç–≤–∞—Ä—è—â–∞—Ç–∞ –∫–∞–≤–∏—á–∫–∞ –¥–æ —Å–ª–µ–¥–≤–∞—â–∞—Ç–∞. –¢–æ–≤–∞ –µ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ –Ω–∞
    ///    —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–∞—Ç–∞ –∫–æ–ª–æ–Ω–∞ –Ω–∞ —Ç–æ–∑–∏ —Ä–µ–¥. –ù–µ –≥–æ —á–∏—Å—Ç–∏—Ç–µ –æ—Ç whitespace, –ø—Ä–æ—Å—Ç–æ –≥–æ
    ///    –ø—Ä–∏–µ–º–∞—Ç–µ –∫–∞–∫—Ç–æ –µ.
    /// 4. –ê–∫–æ –Ω–µ –Ω–∞–º–µ—Ä–∏—Ç–µ –∑–∞—Ç–≤–∞—Ä—è—â–∞ –∫–∞–≤–∏—á–∫–∞, —Ç–æ–≤–∞ –µ –≥—Ä–µ—à–∫–∞.
    /// 5. –ó–∞–ø–∞–∑–≤–∞—Ç–µ —Å–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –≤ –µ–¥–∏–Ω `Row` (`HashMap`) -- –∫–ª—é—á–∞ –µ –∏–º–µ—Ç–æ –Ω–∞ —Ç–µ–∫—É—â–∞—Ç–∞ –∫–æ–ª–æ–Ω–∞,
    ///    –¥–æ –∫–æ—è—Ç–æ —Å—Ç–µ —Å—Ç–∏–≥–Ω–∞–ª–∏, —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –µ —Ç–æ–≤–∞, –∫–æ–µ—Ç–æ —Ç–æ–∫—É-—â–æ –∏–∑–ø–∞—Ä—Å–∏—Ö—Ç–µ.
    /// 6. –ê–∫–æ –Ω—è–º–∞—Ç–µ –æ—Å—Ç–∞–≤–∞—â–∏ –∫–æ–ª–æ–Ω–∏ –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –Ω—è–º–∞—Ç–µ –æ—Å—Ç–∞–≤–∞—â–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –æ—Ç —Ä–µ–¥–∞, –≤—Å–∏—á–∫–æ
    ///    –µ –æ–∫. –í—Ä—ä—â–∞—Ç–µ —Ä–µ–¥–∞.
    /// 7. –ê–∫–æ –Ω—è–º–∞—Ç–µ –æ—Å—Ç–∞–≤–∞—â–∏ –∫–æ–ª–æ–Ω–∏, –Ω–æ –∏–º–∞—Ç–µ –æ—â–µ –æ—Ç —Ä–µ–¥–∞, –∏–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ—Ç–æ, —Ç–æ–≤–∞ –µ –≥—Ä–µ—à–∫–∞.
    ///
    /// –ó–∞ —Ç–æ–∑–∏ –ø—Ä–æ—Ü–µ—Å, –ø–æ–º–æ—â–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ–∏—Ç–æ –¥–µ—Ñ–∏–Ω–∏—Ä–∞—Ö–º–µ –ø–æ-–≥–æ—Ä–µ –º–æ–∂–µ –¥–∞ –≤–∏ —Å–≤—ä—Ä—à–∞—Ç —Ä–∞–±–æ—Ç–∞.
    /// *–ú–æ–∂–µ* –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞—Ç–µ –≤–º–µ—Å—Ç–æ —Ç—è—Ö `.split` –ø–æ –∑–∞–ø–µ—Ç–∞–π–∫–∏, –Ω–æ —â–µ –∏–º–∞–º–µ –ø–æ–Ω–µ –Ω—è–∫–æ–ª–∫–æ —Ç–µ—Å—Ç–∞ —Å—ä—Å
    /// –≤–ª–æ–∂–µ–Ω–∏ –∑–∞–ø–µ—Ç–∞–π–∫–∏. –ë–∏—Ö—Ç–µ –º–æ–≥–ª–∏ –∏ —Å —Ç–æ–≤–∞ –¥–∞ —Å–µ —Å–ø—Ä–∞–≤–∏—Ç–µ –∏–Ω–∞—á–µ, —Ä–∞–∑–±–∏—Ä–∞ —Å–µ -- –≤–∞—à –∏–∑–±–æ—Ä.
    ///
    /// –í–Ω–∏–º–∞–≤–∞–π—Ç–µ —Å –ø—Ä–∞–∑–Ω–æ—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø—Ä–µ–¥–∏ –∏ —Å–ª–µ–¥ –∑–∞–ø–µ—Ç–∞–π–∫–∏ -- –≤–∏–∫–∞–π—Ç–µ `.trim()` –Ω–∞ –∫–ª—é—á–æ–≤–∏
    /// –º–µ—Å—Ç–∞. –í—Å–∏—á–∫–æ –≤ –∫–∞–≤–∏—á–∫–∏ —Å–µ –≤–∑–µ–º–∞ –∫–∞–∫—Ç–æ –µ, –≤—Å–∏—á–∫–æ –∏–∑–≤—ä–Ω —Ç—è—Ö —Å–µ —á–∏—Å—Ç–∏ –æ—Ç whitespace.
    ///
    /// –í—Å–∏—á–∫–∏ –≥—Ä–µ—à–∫–∏, –∫–æ–∏—Ç–æ —â–µ –≤—Ä—ä—â–∞—Ç–µ, —Å–µ –æ—á–∞–∫–≤–∞ –¥–∞ –±—ä–¥–∞—Ç `CsvError::InvalidRow`.
    ///
    pub fn parse_line(&mut self, line: &str) -> Result<Row, CsvError> {
        let mut splited_word;
        let mut line_to_parse = line.clone();
        let cleared_row = line.trim();
        let mut map: Row = HashMap::new();
        if skip_next(line, '"') == None{
            return Err(CsvError::InvalidRow("Missing bracket at row start!".to_string()));
        }
        for column in &self.columns{
            splited_word = take_and_skip(take_and_skip(line_to_parse, '"').unwrap().1, '"');
            if splited_word.is_none() {
                return Err(CsvError::InvalidRow("Row values are fewer than column number!".to_string()));
            };
            map.insert(column.to_string(), splited_word.unwrap().0.to_string());
            line_to_parse = splited_word.unwrap().1;
        }
        if line_to_parse != ""{ 
            return Err(CsvError::InvalidRow("Row values are than more than column number!".to_string()));
        }
        return Ok(map);
    }

    /// –ü–æ–¥–∞–¥–µ–Ω–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è, "callback", —Å–µ –æ—á–∞–∫–≤–∞ –¥–∞ —Å–µ –∑–∞–ø–∞–∑–∏ –∏ –¥–∞ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞ –ø–æ-–∫—ä—Å–Ω–æ –∑–∞
    /// —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ -- –ø—Ä–∏ –∏—Ç–µ—Ä–∞—Ü–∏—è, —Å–∞–º–æ —Ä–µ–¥–æ–≤–µ, –∑–∞ –∫–æ–∏—Ç–æ —Å–µ –≤—Ä—ä—â–∞ `true` —Å–µ –æ—á–∞–∫–≤–∞ –¥–∞ —Å–µ –∏–∑–≤–∞–¥—è—Ç.
    ///
    /// –ë–∏ —Ç—Ä—è–±–≤–∞–ª–æ `callback` –¥–∞ —Å–µ –≤–∏–∫–∞ –æ—Ç `.next()` –∏ –æ—Ç `.write_to()`, –≤–∏–∂—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è—Ç–∞ –Ω–∞ —Ç–µ–∑–∏
    /// –º–µ—Ç–æ–¥–∏ –∑–∞ –¥–µ—Ç–∞–π–ª–∏.
    ///
    pub fn apply_selection<F>(&mut self, callback: F)
        where F: Fn(&Row) -> Result<bool, CsvError> + 'static
    {
        self.selection = Some(Box::new(callback));
    }

    /// –ò–∑–≤–∏–∫–≤–∞–Ω–µ—Ç–æ –Ω–∞ —Ç–æ–∑–∏ –º–µ—Ç–æ–¥ –∫–æ–Ω—Å—É–º–∏—Ä–∞ CSV-—Ç–æ –∏ –∑–∞–ø–∏—Å–≤–∞ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–æ—Ç–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –≤ –ø–æ–¥–∞–¥–µ–Ω–∞—Ç–∞
    /// `Write` —Å—Ç–æ–π–Ω–æ—Å—Ç. –í–∏–∂—Ç–µ –ø–æ-–¥–æ–ª—É –∑–∞ –ø—Ä–∏–º–µ—Ä –∏ –¥–µ—Ç–∞–π–ª–∏.
    ///
    /// –ì—Ä–µ—à–∫–∏—Ç–µ, –∫–æ–∏—Ç–æ —Å–µ –≤—Ä—ä—â–∞—Ç —Å–∞ –≥—Ä–µ—à–∫–∏—Ç–µ, –∫–æ–∏—Ç–æ –∏–¥–≤–∞—Ç –æ—Ç –∏–∑–ø–æ–ª–∑–≤–∞–Ω–∏—Ç–µ –¥—Ä—É–≥–∏ –º–µ—Ç–æ–¥–∏, –ø–ª—é—Å
    /// –≥—Ä–µ—à–∫–∏—Ç–µ –æ—Ç –ø–∏—Å–∞–Ω–µ –≤—ä–≤ `writer`-–∞, –æ–ø–∞–∫–æ–≤–∞–Ω–∏ –≤ `CsvError::IO`.
    ///
    /// –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç –æ—Ç —Ç–æ–≤–∞ –∫–∞–∫ —Å–∏ –∏–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä–∞—Ç–µ –º–µ—Ç–æ–¥–∞, `mut` –º–æ–∂–µ –±–∏ –Ω—è–º–∞ –¥–∞ –≤–∏ —Ç—Ä—è–±–≤–∞ –∑–∞
    /// `self` -- –∞–∫–æ –∏–º–∞—Ç–µ warning-–∏, –ø—Ä–æ—Å—Ç–æ –≥–æ –º–∞—Ö–Ω–µ—Ç–µ.
    ///
    pub fn write_to<W: Write>(mut self, mut writer: W) -> Result<(), CsvError> {
        let mut row;
        let mut line: String = String::from("");
        let mut headers = self.columns.join(", ");
        headers.push_str("\n");
        let mut formatted_parsed_line = headers;
        while self.reader.read_line(&mut line).unwrap() != 0{
            row = match self.parse_line(&line.trim()) {
                Err(e) => return Err(e),
                Ok(val) => val,
            };
            for column in &self.columns{
                formatted_parsed_line.push_str(&format!(r#""{}", "#, &row[column]));
            }
            formatted_parsed_line.pop();
            formatted_parsed_line.pop();
            formatted_parsed_line.push_str("\n");
            match write!(writer, "{}",formatted_parsed_line){
                Err(_) => return Err(CsvError::IO(io::Error::new(io::ErrorKind::Other, "writing to buffer error!"))),
                Ok(_) => (),
            };
            formatted_parsed_line = String::from("");
            line = String::from("");
        }
        return Ok(());
    }
}

impl<R: BufRead> Iterator for Csv<R> {
    type Item = Result<Row, CsvError>;

    /// –ò—Ç–µ—Ä–∞—Ü–∏—è—Ç–∞ —Å–µ —Å—ä—Å—Ç–æ–∏ –æ—Ç –Ω—è–∫–æ–ª–∫–æ —Å—Ç—ä–ø–∫–∏:
    ///
    /// 1. –ü—Ä–æ—á–∏—Ç–∞–º–µ —Å–ª–µ–¥–≤–∞—â–∏—è —Ä–µ–¥ –æ—Ç –≤—Ö–æ–¥–∞:
    ///     -> –ê–∫–æ –∏–º–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–µ—Ç–µ–Ω–µ, –≤—Ä—ä—â–∞–º–µ Some(CsvError::IO(...))
    ///     -> –ê–∫–æ —É—Å–ø–µ—à–Ω–æ —Å–µ –ø—Ä–æ—á–µ—Ç–∞—Ç 0 –±–∞–π—Ç–∞, –∑–Ω–∞—á–∏ —Å–º–µ –Ω–∞ –∫—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥–∞, –∏ –Ω—è–º–∞ –∫–∞–∫–≤–æ –ø–æ–≤–µ—á–µ –¥–∞
    ///        —á–µ—Ç–µ–º -- –≤—Ä—ä—â–∞–º–µ `None`
    ///     -> –ò–Ω–∞—á–µ, –∏–º–∞–º–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–µ—Ç–µ–Ω —Ä–µ–¥, –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞–º–µ –Ω–∞–ø—Ä–µ–¥
    /// 2. –û–ø–∏—Ç–≤–∞–º–µ —Å–µ –¥–∞ –æ–±—Ä–∞–±–æ—Ç–∏–º –ø—Ä–æ—á–µ—Ç–µ–Ω–∏—è —Ä–µ–¥ —Å—ä—Å `parse_line`:
    ///     -> –ê–∫–æ –∏–º–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–µ–Ω–µ, –≤—Ä—ä—â–∞–º–µ Some(CsvError-–∞, –∫–æ–π—Ç–æ —Å–µ –≤—Ä—ä—â–∞ –æ—Ç `parse_line`)
    ///     -> –ê–∫–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–∏–∫–∞–º–µ `parse_line`, –≤–µ—á–µ –∏–º–∞–º–µ `Row` —Å—Ç–æ–π–Ω–æ—Å—Ç.
    /// 3. –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Ç–æ–∑–∏ —Ä–µ–¥ –∏–∑–ø—ä–ª–Ω—è–≤–∞ —É—Å–ª–æ–≤–∏–µ—Ç–æ, –∑–∞–ø–∞–∑–µ–Ω–æ –æ—Ç `apply_selection`:
    ///     -> –ê–∫–æ —É—Å–ª–æ–≤–∏–µ—Ç–æ –≤—ä—Ä–Ω–µ –≥—Ä–µ—à–∫–∞, –≤—Ä—ä—â–∞–º–µ —Ç–∞–∑–∏ –≥—Ä–µ—à–∫–∞ –æ–ø–∞–∫–æ–≤–∞–Ω–∞ –≤—ä–≤ `Some`.
    ///     -> –ê–∫–æ —É—Å–ª–æ–≤–∏–µ—Ç–æ –≤—ä—Ä–Ω–µ Ok(false), *–Ω–µ* –≤—Ä—ä—â–∞–º–µ —Ç–æ–∑–∏ —Ä–µ–¥, –∞ –ø—Ä–æ–±–≤–∞–º–µ —Å–ª–µ–¥–≤–∞—â–∏—è (–æ–±—Ä–∞—Ç–Ω–æ
    ///        –∫—ä–º —Å—Ç—ä–ø–∫–∞ 1)
    ///     -> –ü—Ä–∏ Ok(true), –≤—Ä—ä—â–∞–º–µ —Ç–æ–∑–∏ —Ä–µ–¥, –æ–ø–∞–∫–æ–≤–∞–Ω –≤—ä–≤ `Some`
    ///
    /// –î–∞, —Ç–∞–∑–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—Ä—ä—â–∞ `Option<Result<...>>` :). `Option` –∑–∞—â–æ—Ç–æ –º–æ–∂–µ –¥–∞ –∏–º–∞, –º–æ–∂–µ –¥–∞ –Ω—è–º–∞
    /// —Å–ª–µ–¥–≤–∞—â —Ä–µ–¥, `Result` –∑–∞—â–æ—Ç–æ —á–µ—Ç–µ–Ω–µ—Ç–æ –Ω–∞ —Ä–µ–¥–∞ (–æ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ñ–∞–π–ª) –º–æ–∂–µ –¥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∏.
    ///
    fn next(&mut self) -> Option<Self::Item> {
        let mut row;
        let mut line: String = String::from("");
        let mut read_bytes =  match self.reader.read_line(&mut line) {
            Err(_) => return Some(Err(CsvError::IO(io::Error::new(io::ErrorKind::Other, "reading from buffer error!")))),
            Ok(val) => val,
        };
        while read_bytes != 0 {
            row = match self.parse_line(&line.trim()) {
                Err(e) => return Some(Err(e)),
                Ok(val) => val,
            };
            if !self.selection.is_none() {
                match self.selection.as_ref().unwrap()(&row){
                    Err(e) => return Some(Err(e)),
                    Ok(false) => (),
                    Ok(true) => return Some(Ok(row)),
                }
            }
            else {
                return Some(Ok(row));
            }
            line = String::from("");
            read_bytes =   match self.reader.read_line(&mut line) {
                Err(_) => return Some(Err(CsvError::IO(io::Error::new(io::ErrorKind::Other, "reading from buffer error!")))),
                Ok(val) => val,
            };
        }
        return None;
    }
}